AWSTemplateFormatVersion: 2010-09-09
Description: >-
  AWS CloudFormation Sample Template LAMP_Multi_AZ: Create AWS CloudFormation
  Customize Virtual Private Cloud
Parameters:
  Environment:
    Description: Setting Environment to avoid overlap name
    Type: String
    Default: production
    AllowedValues:
      - development
      - staging
      - production
  DomainName:
    Description: Domain name (ex. example.com)
    Default: "xxxxx.koichi-test.de"
    Type: String
  VpcCidrBlock:
    Type: String
    Description: Please input an IP range in VPC.
    Default: 10.10.0.0/16
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/16'
    ConstraintDescription: ''
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instances
    Type: 'AWS::EC2::KeyPair::KeyName'
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
  InstanceType:
    Type: "String"
    Default: "t2.micro"
    AllowedValues:
      - t2.micro
      - t2.small
      - t2.medium
      - t2.large
      - c4.large
      - r4.large
      - m4.large
    Description: "EC2 instance type, e.g. m1.small, m1.large, etc."
  ClusterSize:
    Description: Number of EC2 instances in our ECS cluster
    Type: String
    Default: 1
  DesiredCount:
    Description: How many instances of this task should we run across our cluster?
    Type: Number
    Default: 2
  DBName:
    Default: myDatabase
    Description: MySQL database name
    Type: String
    MinLength: '1'
    MaxLength: '64'
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: must begin with a letter and contain only alphanumeric characters.
  DBUser:
    NoEcho: 'true'
    Description: Username for MySQL database access
    Type: String
    MinLength: '1'
    MaxLength: '16'
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: must begin with a letter and contain only alphanumeric characters.
  DBPassword:
    NoEcho: 'true'
    Description: Password for MySQL database access
    Type: String
    MinLength: '8'
    MaxLength: '41'
    AllowedPattern: '[a-zA-Z0-9]*'
    ConstraintDescription: must contain only alphanumeric characters.
  DBAllocatedStorage:
    Default: '5'
    Description: The size of the database (Gb)
    Type: Number
    MinValue: '5'
    MaxValue: '1024'
    ConstraintDescription: must be between 5 and 1024Gb.
  DBInstanceClass:
    Description: The database instance type
    Type: String
    Default: db.t2.medium
    AllowedValues:
      - db.t2.medium
      - db.r3.large
      - db.r3.xlarge
      - db.r3.2xlarge
      - db.r3.4xlarge
      - db.r3.8xlarge
    ConstraintDescription: must select a valid database instance type.
  SSHLocation:
    Description: ' The IP address range that can be used to SSH to the EC2 instances'
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 0.0.0.0/0
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
  SNSEndpoint:
    Description: 'This is endpoint'
    Type: String
    Default: "sugimoto_@arcplg.com"
    ConstraintDescription: "This Value is set SNS Endpoint(AWS SNS Settings)"
  SNSProtocol:
    Description: 'This is protocol'
    Type: String
    Default: "email"
    AllowedValues:
      - http
      - https
      - email
      - email-json
      - sms
      - sqs
      - application
      - lambda
    ConstraintDescription: "This Value is set SNS Protocol(AWS SNS Settings)"
  # CacheNodeType:
  #   Default: cache.t2.micro
  #   Type: String
  #   AllowedValues:
  #     - cache.t2.small
  #     - cache.t2.medium
  #   ConstraintDescription: "The compute and memory capacity of the nodes in the Cache Cluster"

Mappings:
  # These are the latest ECS optimized AMIs
  #
  # You can find the latest available on this page of our documentation:
  # http://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html
  # (note the AMI identifier is region specific)
  AWSRegionToAMI:
    us-east-2:
      AMI: ami-956e52f0
    us-east-1:
      AMI: ami-5253c32d
    us-west-2:
      AMI: ami-d2f489aa
    us-west-1:
      AMI: ami-6b81980b
    eu-west-3:
      AMI: ami-ca75c4b7
    eu-west-2:
      AMI: ami-3622cf51
    eu-west-1:
      AMI: ami-c91624b0
    eu-central-1:
      AMI: ami-10e6c8fb
    ap-northeast-2:
      AMI: ami-7c69c112
    ap-northeast-1:
      AMI: ami-f3f8098c
    ap-southeast-2:
      AMI: ami-bc04d5de
    ap-southeast-1:
      AMI: ami-b75a6acb
    ca-central-1:
      AMI: ami-da6cecbe
    ap-south-1:
      AMI: ami-c7072aa8
    sa-east-1:
      AMI: ami-a1e2becd
    us-gov-west-1:
      AMI: ami-03920462
Resources:
  # CFNRole:
  #   Type: 'AWS::IAM::Role'
  #   Properties:
  #     AssumeRolePolicyDocument:
  #       Statement:
  #         - Effect: Allow
  #           Principal:
  #             Service:
  #               - ec2.amazonaws.com
  #           Action:
  #             - 'sts:AssumeRole'
  #     Path: /
  # CFNRolePolicy:
  #   Type: 'AWS::IAM::Policy'
  #   Properties:
  #     PolicyName: CloudFormerPolicy
  #     PolicyDocument:
  #       Statement:
  #         - Effect: Allow
  #           Action: "*"
  #           Resource: "*"
  #     Roles:
  #       - !Ref CFNRole
  # CFNInstanceProfile:
  #   Type: 'AWS::IAM::InstanceProfile'
  #   Properties:
  #     Path: /
  #     Roles:
  #       - !Ref CFNRole

  # Role
  ECSRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: ecs-service
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - ecs:CreateCluster
                  - ecs:DeregisterContainerInstance
                  - ecs:DiscoverPollEndpoint
                  - ecs:Poll
                  - ecs:RegisterContainerInstance
                  - ecs:StartTelemetrySession
                  - ecs:Submit*
                  - logs:*
                  - ecr:BatchCheckLayerAvailability
                  - ecr:BatchGetImage
                  - ecr:GetDownloadUrlForLayer
                  - ecr:GetAuthorizationToken
                  - ssm:*
                  - ec2messages:*
                  - cloudwatch:PutMetricData
                  - ec2:DescribeInstanceStatus
                Resource: "*"
        - PolicyName: ec2-s3-write-access
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetBucketAcl
                  - s3:PutObjectTagging
                  - s3:ListBucket
                  - s3:PutObjectAcl
                  - s3:ListBucketMultipartUploads
                Resource: "*"
        - PolicyName: ec2-cloudwatch-write-access
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - logs:CreateLogGroup
                Resource: "*"

  ECSInstanceProfile: 
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles: 
        - !Ref ECSRole

  ServiceRole: 
    Type: AWS::IAM::Role
    Properties: 
      RoleName: !Sub ecs-service-${AWS::StackName}
      Path: /
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: 
                - ecs.amazonaws.com
            Action: 'sts:AssumeRole'
      Policies: 
        - PolicyName: !Sub ecs-service-${AWS::StackName}
          PolicyDocument: 
            Statement:
              - Effect: Allow
                Action:
                  - ec2:AuthorizeSecurityGroupIngress
                  - ec2:Describe*
                  - elasticloadbalancing:DeregisterInstancesFromLoadBalancer
                  - elasticloadbalancing:Describe*
                  - elasticloadbalancing:RegisterInstancesWithLoadBalancer
                  - elasticloadbalancing:DeregisterTargets
                  - elasticloadbalancing:DescribeTargetGroups
                  - elasticloadbalancing:DescribeTargetHealth
                  - elasticloadbalancing:RegisterTargets
                Resource: "*"

  # ALB
  ApplicationLoadBalancer:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    Properties:
      Subnets: 
        - !Ref VPCSubnet
        - !Ref VPCSubnet2
      SecurityGroups: 
        - !Ref ALBSecurityGroup
  ALBListener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ALBTargetGroup
  ALBListenerHTTPS:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 443
      Protocol: HTTPS
      Certificates:
        - CertificateArn: !Ref ALBCertificateArn
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ALBTargetGroup

  # Target Group
  ALBTargetGroup:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      Port: 80
      Protocol: HTTP
      Matcher:
        HttpCode: 200-301
      UnhealthyThresholdCount: 5
      VpcId: !Ref VPC
  ALBTargetGroupHTTPS:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      VpcId: !Ref VPC
      Port: 80
      Protocol: HTTP
      Matcher:
        HttpCode: 200-301
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2

  # サーバー証明書
  ALBCertificateArn:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: !Ref DomainName
      DomainValidationOptions:
      - DomainName: !Ref DomainName
        ValidationDomain: !Ref DomainName

  # Cloud Front
  CFDistribution:
    Type: 'AWS::CloudFront::Distribution'
    Properties:
      DistributionConfig:
        Origins:
        - Id: S3Origin
          DomainName: !GetAtt PublicS3Bucket.DomainName
          S3OriginConfig:
            OriginAccessIdentity: !Sub origin-access-identity/cloudfront/${CloudFrontOriginAccessIdentity}
        Enabled: true
        DefaultCacheBehavior:
          AllowedMethods:
            - DELETE
            - GET
            - HEAD
            - OPTIONS
            - PATCH
            - POST
            - PUT
          TargetOriginId: S3Origin
          ForwardedValues:
            QueryString: false
            Cookies:
              Forward: none
          # ViewerProtocolPolicy: redirect-to-https
          ViewerProtocolPolicy: allow-all
  CloudFrontOriginAccessIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: !Ref AWS::StackName

  # S3 for Application
  PublicS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: PublicRead
  PrivateS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: PublicRead

  # BucketPolicy
  PublicBucketPolicy:
    Type: 'AWS::S3::BucketPolicy'
    Properties:
      Bucket: !Ref PublicS3Bucket
      PolicyDocument:
        Statement:
          - Action: s3:GetObject
            Effect: Allow
            Resource: !Sub arn:aws:s3:::${PublicS3Bucket}/*
            Principal:
              AWS: !Sub arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity ${CloudFrontOriginAccessIdentity}
  PrivateBucketPolicy:
    Type: 'AWS::S3::BucketPolicy'
    Properties:
      Bucket: !Ref PrivateS3Bucket
      PolicyDocument:
        Statement:
          - Action: 's3:*'
            Effect: Deny
            Principal: '*'
            Resource: !Join 
              - ''
              - - 'arn:aws:s3:::'
                - !Ref PrivateS3Bucket
                - /*
            Condition:
              StringNotEquals: 
                aws:sourceVpc: !Ref VPC

  # AutoScaling for ECS
  ECSAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier: 
        - !Ref VPCSubnet
        - !Ref VPCSubnet2
      LaunchConfigurationName: !Ref ECSLaunchConfiguration
      MinSize: !Ref ClusterSize
      MaxSize: !Ref ClusterSize
      DesiredCapacity: !Ref ClusterSize
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName} ECS host
          PropagateAtLaunch: true
    CreationPolicy:
      ResourceSignal:
        Timeout: PT15M
    UpdatePolicy:
      AutoScalingReplacingUpdate:
        WillReplace: true
      AutoScalingRollingUpdate:
        MinInstancesInService: 1
        MaxBatchSize: 1
        PauseTime: PT15M
        SuspendProcesses:
          - HealthCheck
          - ReplaceUnhealthy
          - AZRebalance
          - AlarmNotification
          - ScheduledActions
        WaitOnResourceSignals: true

  ECSLaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId:  !FindInMap [AWSRegionToAMI, !Ref "AWS::Region", AMI]
      InstanceType: !Ref InstanceType
      SecurityGroups:
        - !Ref WebServerSecurityGroup
      IamInstanceProfile: !Ref ECSInstanceProfile
      KeyName: !Ref KeyName
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          yum update -y
          yum install -y aws-cfn-bootstrap aws-cli go
          echo "{ "credsStore":"ecr-login" }' > ~/.docker/config.json
          go get -u github.com/awslabs/amazon-ecr-credential-helper/ecr-login/cli/docker-credential-ecr-login
          cd /home/ec2-user/go/src/github.com/awslabs/amazon-ecr-credential-helper/ecr-login/cli/docker-credential-ecr-login
          go build
          export PATH=$PATH:/home/ec2-user/go/bin
          /opt/aws/bin/cfn-init -v --region ${AWS::Region} --stack ${AWS::StackName} --resource ECSLaunchConfiguration
          /opt/aws/bin/cfn-signal -e $? --region ${AWS::Region} --stack ${AWS::StackName} --resource ECSAutoScalingGroup
    Metadata:
      AWS::CloudFormation::Init:
        config:
          commands:
            01_add_instance_to_cluster:
              command: !Sub echo ECS_CLUSTER=${ECSCluster} >> /etc/ecs/ecs.config
          files:
            "/etc/cfn/cfn-hup.conf":
              mode: 000400
              owner: root
              group: root
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}

            "/etc/cfn/hooks.d/cfn-auto-reloader.conf":
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.ECSLaunchConfiguration.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init -v --region ${AWS::Region} --stack ${AWS::StackName} --resource ECSLaunchConfiguration

          services:
            sysvinit:
              cfn-hup:
                enabled: true
                ensureRunning: true
                files:
                  - /etc/cfn/cfn-hup.conf
                  - /etc/cfn/hooks.d/cfn-auto-reloader.conf

  # ECS Cluster
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Ref AWS::StackName

  # ECR
  ECR:
    DependsOn: ECSRole
    Type: AWS::ECR::Repository
    Properties:
      # RepositoryName: !Sub ${AWS::StackName}-nginx
      RepositoryPolicyText:
        Statement:
          - Sid: AllowPushPull
            Effect: Allow
            Principal:
              AWS:
                - !Sub arn:aws:iam::${AWS::AccountId}:role/${ECSRole}
            Action:
              - ecr:GetDownloadUrlForLayer
              - ecr:BatchGetImage
              - ecr:BatchCheckLayerAvailability
              - ecr:PutImage
              - ecr:InitiateLayerUpload
              - ecr:UploadLayerPart
              - ecr:CompleteLayerUpload

  # ECS Service
  Service: 
    Type: AWS::ECS::Service
    DependsOn: ALBListener
    Properties: 
      Cluster: !Ref ECSCluster
      Role: !Ref ServiceRole
      DesiredCount: !Ref DesiredCount
      TaskDefinition: !Ref TaskDefinition
      LoadBalancers: 
        - ContainerName: nginx
          ContainerPort: 80
          TargetGroupArn: !Ref ALBTargetGroup
  ServiceWorkers:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref ECSCluster
      DesiredCount: 1
      TaskDefinition: !Ref TaskDefinitionWorker
  ServiceCron:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref ECSCluster
      DesiredCount: 1
      TaskDefinition: !Ref TaskDefinitionCron
  # ServiceRedirect:
  #   Type: AWS::ECS::Service
  #   DependsOn: ALBListenerHTTPS
  #   Properties:
  #     Cluster: !Ref ECSCluster
  #     Role: !Ref ServiceRole
  #     DesiredCount: 1
  #     TaskDefinition: !Ref TaskDefinitionRedirectHTTPtoHTTPS
  #     LoadBalancers:
  #       - ContainerName: nginx-to-https
  #         ContainerPort: 80
  #         TargetGroupArn: !Ref ALBTargetGroupHTTPS
  
  # ECS Task
  TaskDefinitionRedirectHTTPtoHTTPS:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: nginx-to-https
      ContainerDefinitions:
        - Name: nginx-to-https
          Essential: true
          Image: getlionel/nginx-to-https
          Memory: 128
          PortMappings:
            - ContainerPort: 80
  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: laravel-nginx
      ContainerDefinitions:
        - Name: nginx
          Essential: true
          Image: !Join [ ".", [ !Ref "AWS::AccountId", "dkr.ecr", !Ref "AWS::Region", !Join [ ":", [ !Join [ "/", [ "amazonaws.com", !Ref ECR ] ], "nginx" ] ] ] ]
          Memory: 128
          PortMappings:
            - ContainerPort: 80
          Links:
            - app
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref AWS::StackName
              awslogs-region: !Ref AWS::Region
        - Name: app
          Essential: true
          Image: !Join [ ".", [ !Ref "AWS::AccountId", "dkr.ecr", !Ref "AWS::Region", !Join [ ":", [ !Join [ "/", [ "amazonaws.com", !Ref ECR ] ], "laravel" ] ] ] ]
          Memory: 128
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref AWS::StackName
              awslogs-region: !Ref AWS::Region
          # Environment:
          #   - Name: APP_NAME
          #     Value: Laravel
          #   - Name: APP_ENV
          #     Value: production
          #   - Name: APP_DEBUG
          #     Value: false
          #   - Name: APP_LOG_LEVEL
          #     Value: error
          #   - Name: APP_KEY
          #     Value: base64:h2ASblVGbCXbC1buJ8KToZkKIEY69GSiutkAeGo77B0=
          #   - Name: APP_URL
          #     Value: !Ref APPURL
          #   - Name: DB_CONNECTION
          #     Value: !Ref DBCONNECTION
          #   - Name: DB_HOST
          #     Value: !Ref DBHOST
          #   - Name: DB_PORT
          #     Value: !Ref DBPORT
          #   - Name: DB_DATABASE
          #     Value: !Ref DBDATABASE
          #   - Name: DB_USERNAME
          #     Value: !Ref DBUSERNAME
          #   - Name: DB_PASSWORD
          #     Value: !Ref DBPASSWORD
          #   - Name: CACHE_DRIVER
          #     Value: file
          #   - Name: SESSION_DRIVER
          #     Value: database
          #   - Name: MAIL_DRIVER
          #     Value: !Ref MAILDRIVER
          #   - Name: MAIL_HOST
          #     Value: !Ref MAILHOST
          #   - Name: MAIL_PORT
          #     Value: !Ref MAILPORT
          #   - Name: MAIL_USERNAME
          #     Value: !Ref MAILUSERNAME
          #   - Name: MAIL_PASSWORD
          #     Value: !Ref MAILPASSWORD
          #   - Name: MAIL_FROM_ADDRESS
          #     Value: !Ref MAILFROMADDRESS
          #   - Name: MAIL_FROM_NAME
          #     Value: !Ref MAILFROMNAME
          #   - Name: FILESYSTEM_DRIVER
          #     Value: !Ref FILESYSTEMDRIVER
          #   - Name: AWS_REGION
          #     Value: !Sub ${AWS::Region}
          #   - Name: AWS_BUCKET
          #     Value: !Ref AWSBUCKET
          #   - Name: QUEUE_DRIVER
          #     Value: !Ref QUEUEDRIVER
          #   - Name: AWS_ACCOUNT_ID
          #     Value: !Ref AWS::AccountId
          #   - Name: QUEUE_NAME
          #     Value: !Ref QUEUENAME

  TaskDefinitionWorker:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: laravel-workers
      ContainerDefinitions:
        - Name: app
          Essential: true
          Image: !Join [ ".", [ !Ref "AWS::AccountId", "dkr.ecr", !Ref "AWS::Region", !Join [ ":", [ !Join [ "/", [ "amazonaws.com", !Ref ECR ] ], "laravel" ] ] ] ]
          Command:
            - "/bin/sh"
            - "-c"
            - "php artisan queue:work"
          Memory: 128
          LogConfiguration:
            LogDriver: awslogs
            Options:
                awslogs-group: !Ref AWS::StackName
                awslogs-region: !Ref AWS::Region
          # Environment:
          #   - Name: APP_NAME
          #     Value: Laravel
          #   - Name: APP_ENV
          #     Value: production
          #   - Name: APP_DEBUG
          #     Value: false
          #   - Name: APP_LOG_LEVEL
          #     Value: error
          #   - Name: APP_KEY
          #     Value: base64:h2ASblVGbCXbC1buJ8KToZkKIEY69GSiutkAeGo77B0=
          #   - Name: APP_URL
          #     Value: !Ref APPURL
          #   - Name: DB_CONNECTION
          #     Value: !Ref DBCONNECTION
          #   - Name: DB_HOST
          #     Value: !Ref DBHOST
          #   - Name: DB_PORT
          #     Value: !Ref DBPORT
          #   - Name: DB_DATABASE
          #     Value: !Ref DBDATABASE
          #   - Name: DB_USERNAME
          #     Value: !Ref DBUSERNAME
          #   - Name: DB_PASSWORD
          #     Value: !Ref DBPASSWORD
          #   - Name: CACHE_DRIVER
          #     Value: file
          #   - Name: SESSION_DRIVER
          #     Value: database
          #   - Name: MAIL_DRIVER
          #     Value: !Ref MAILDRIVER
          #   - Name: MAIL_HOST
          #     Value: !Ref MAILHOST
          #   - Name: MAIL_PORT
          #     Value: !Ref MAILPORT
          #   - Name: MAIL_USERNAME
          #     Value: !Ref MAILUSERNAME
          #   - Name: MAIL_PASSWORD
          #     Value: !Ref MAILPASSWORD
          #   - Name: MAIL_FROM_ADDRESS
          #     Value: !Ref MAILFROMADDRESS
          #   - Name: MAIL_FROM_NAME
          #     Value: !Ref MAILFROMNAME
          #   - Name: FILESYSTEM_DRIVER
          #     Value: !Ref FILESYSTEMDRIVER
          #   - Name: AWS_REGION
          #     Value: !Sub ${AWS::Region}
          #   - Name: AWS_BUCKET
          #     Value: !Ref AWSBUCKET
          #   - Name: QUEUE_DRIVER
          #     Value: !Ref QUEUEDRIVER
          #   - Name: AWS_ACCOUNT_ID
          #     Value: !Ref AWS::AccountId
          #   - Name: QUEUE_NAME
          #     Value: !Ref QUEUENAME

  TaskDefinitionCron:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: laravel-cron
      ContainerDefinitions:
        - Name: app
          Essential: true
          Image: !Join [ ".", [ !Ref "AWS::AccountId", "dkr.ecr", !Ref "AWS::Region", !Join [ ":", [ !Join [ "/", [ "amazonaws.com", !Ref ECR ] ], "laravel" ] ] ] ]
          EntryPoint:
            - /bin/bash
            - -c
          Command:
            - env /bin/bash -o posix -c 'export -p' > /etc/cron.d/project_env.sh && chmod +x /etc/cron.d/project_env.sh && crontab /etc/cron.d/artisan-schedule-run && cron && tail -f /var/log/cron.log
          Memory: 128
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref AWS::StackName
              awslogs-region: !Ref AWS::Region
          # Environment:
          #   - Name: APP_NAME
          #     Value: Laravel
          #   - Name: APP_ENV
          #     Value: production
          #   - Name: APP_DEBUG
          #     Value: false
          #   - Name: APP_LOG_LEVEL
          #     Value: error
          #   - Name: APP_KEY
          #     Value: base64:h2ASblVGbCXbC1buJ8KToZkKIEY69GSiutkAeGo77B0=
          #   - Name: APP_URL
          #     Value: !Ref APPURL
          #   - Name: DB_CONNECTION
          #     Value: !Ref DBCONNECTION
          #   - Name: DB_HOST
          #     Value: !Ref DBHOST
          #   - Name: DB_PORT
          #     Value: !Ref DBPORT
          #   - Name: DB_DATABASE
          #     Value: !Ref DBDATABASE
          #   - Name: DB_USERNAME
          #     Value: !Ref DBUSERNAME
          #   - Name: DB_PASSWORD
          #     Value: !Ref DBPASSWORD
          #   - Name: CACHE_DRIVER
          #     Value: file
          #   - Name: SESSION_DRIVER
          #     Value: database
          #   - Name: MAIL_DRIVER
          #     Value: !Ref MAILDRIVER
          #   - Name: MAIL_HOST
          #     Value: !Ref MAILHOST
          #   - Name: MAIL_PORT
          #     Value: !Ref MAILPORT
          #   - Name: MAIL_USERNAME
          #     Value: !Ref MAILUSERNAME
          #   - Name: MAIL_PASSWORD
          #     Value: !Ref MAILPASSWORD
          #   - Name: MAIL_FROM_ADDRESS
          #     Value: !Ref MAILFROMADDRESS
          #   - Name: MAIL_FROM_NAME
          #     Value: !Ref MAILFROMNAME
          #   - Name: FILESYSTEM_DRIVER
          #     Value: !Ref FILESYSTEMDRIVER
          #   - Name: AWS_REGION
          #     Value: !Sub ${AWS::Region}
          #   - Name: AWS_BUCKET
          #     Value: !Ref AWSBUCKET
          #   - Name: QUEUE_DRIVER
          #     Value: !Ref QUEUEDRIVER
          #   - Name: QUEUE_NAME
          #     Value: !Ref QUEUENAME
  # Cloud Watch
#   CPUScaleOutAlarm:
#     Type: AWS::CloudWatch::Alarm
#     Properties:
#       AlarmName: CPU utilization greater than 90%
#       AlarmDescription: Alarm if cpu utilization greater than 90% of reserved cpu
#       Namespace: AWS/ECS
#       MetricName: CPUUtilization
#       Dimensions:
#       - Name: ClusterName
#         Value: !Ref ECSCluster
#       - Name: ServiceName
#         Value: !GetAtt Service.Name
#       Statistic: Maximum
#       Period: '60'
#       EvaluationPeriods: '3'
#       Threshold: '90'
#       ComparisonOperator: GreaterThanThreshold
#       AlarmActions:
#       - !Ref ServiceScaleOutPolicy

# CPUScaleInAlarm:
#   Type: AWS::CloudWatch::Alarm
#   Properties:
#     AlarmName: CPU utilization less than 70%
#     AlarmDescription: Alarm if cpu utilization greater than 70% of reserved cpu
#     Namespace: AWS/ECS
#     MetricName: CPUUtilization
#     Dimensions:
#     - Name: ClusterName
#       Value: !Ref ECSCluster
#     - Name: ServiceName
#       Value: !GetAtt Service.Name
#     Statistic: Maximum
#     Period: '60'
#     EvaluationPeriods: '10'
#     Threshold: '70'
#     ComparisonOperator: LessThanThreshold
#     AlarmActions:
#     - !Ref ServiceScaleInPolicy


  # DB Instance
  DatabaseCluster:
    Type: AWS::RDS::DBCluster
    Properties:
      Engine: aurora
      MasterUsername: !Ref DBUser
      MasterUserPassword: !Ref DBPassword
      BackupRetentionPeriod: 3
      PreferredBackupWindow: 01:00-02:00
      PreferredMaintenanceWindow: mon:03:00-mon:04:00
      DBSubnetGroupName: !Ref VPCDBSubnetGroup
      VpcSecurityGroupIds: 
        - !Ref DBEC2SecurityGroup
  DatabasePrimaryInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      Engine: aurora
      DBClusterIdentifier: !Ref DatabaseCluster
      DBInstanceClass: !Ref DBInstanceClass
      DBSubnetGroupName: !Ref VPCDBSubnetGroup
  DatabaseReplicaInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      Engine: aurora
      DBClusterIdentifier: !Ref DatabaseCluster
      DBInstanceClass: !Ref DBInstanceClass
      DBSubnetGroupName: !Ref VPCDBSubnetGroup

  # ElastiCache
  ElastiCache:
    Type: 'AWS::ElastiCache::ReplicationGroup'
    Properties:
      AutomaticFailoverEnabled: true
      CacheNodeType: cache.t2.micro
      CacheSubnetGroupName: !Ref CacheSubnetGroup
      Engine: redis
      NumNodeGroups: 2
      NodeGroupConfiguration:
        - PrimaryAvailabilityZone: ap-northeast-1a
          ReplicaAvailabilityZones:
            - ap-northeast-1a
            - ap-northeast-1c
        - PrimaryAvailabilityZone: ap-northeast-1c
          ReplicaAvailabilityZones:
            - ap-northeast-1a
            - ap-northeast-1c
      ReplicasPerNodeGroup: 2
      ReplicationGroupDescription: 'Elasticache Redis'
      SecurityGroupIds:
        - !GetAtt CacheSecurityGroup.GroupId
      SnapshotRetentionLimit: 3
  
  # SNS
  SNSTopic:
    Type: 'AWS::SNS::Topic'
    Properties: 
      Subscription:
        - Endpoint: !Ref SNSEndpoint
          Protocol: !Ref SNSProtocol

  # VPC
  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: !Ref VpcCidrBlock
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: Default VPC

# SecurityGroup
  ALBSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: "80/443 from every IPs"
      SecurityGroupIngress: 
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: "0.0.0.0/0"
        - IpProtocol: tcp
          FromPort: '443'
          ToPort: '443'
          CidrIp: "0.0.0.0/0"
      VpcId: !Ref VPC
  WebServerSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Enable HTTP access via port 80 locked down to the ELB and SSH access
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          SourceSecurityGroupId: !Select 
            - 0
            - !GetAtt
              - ApplicationLoadBalancer
              - SecurityGroups
        - IpProtocol: tcp
          FromPort: '443'
          ToPort: '443'
          SourceSecurityGroupId: !Select 
            - 0
            - !GetAtt 
              - ApplicationLoadBalancer
              - SecurityGroups
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: !Ref SSHLocation
      VpcId: !Ref VPC
  DBEC2SecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Open database for access
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '3306'
          ToPort: '3306'
          SourceSecurityGroupId: !Ref WebServerSecurityGroup
      VpcId: !Ref VPC
  CacheSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: Open ElastiCache for access
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '6379'
          ToPort: '6379'
      VpcId: !Ref VPC

  # Subnet
  VPCSubnet:
    Type: 'AWS::EC2::Subnet'
    Properties:
      MapPublicIpOnLaunch: 'true'
      AvailabilityZone: !Select 
        - '0'
        - !GetAZs 
          Ref: 'AWS::Region'
      VpcId: !Ref VPC
      CidrBlock: 10.10.0.0/24
  VPCSubnet2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      MapPublicIpOnLaunch: 'true'
      AvailabilityZone: !Select 
        - '2'
        - !GetAZs 
          Ref: 'AWS::Region'
      VpcId: !Ref VPC
      CidrBlock: 10.10.1.0/24
  VPCSubnetAZ1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      MapPublicIpOnLaunch: 'true'
      AvailabilityZone: 'ap-northeast-1a'
      VpcId: !Ref VPC
      CidrBlock: 10.10.2.0/24
  VPCSubnetAZ2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      MapPublicIpOnLaunch: 'true'
      AvailabilityZone: 'ap-northeast-1c'
      VpcId: !Ref VPC
      CidrBlock: 10.10.3.0/24
  VPCSubnetAZ3:
    Type: 'AWS::EC2::Subnet'
    Properties:
      MapPublicIpOnLaunch: 'true'
      AvailabilityZone: 'ap-northeast-1a'
      VpcId: !Ref VPC
      CidrBlock: 10.10.4.0/24
  VPCSubnetAZ4:
    Type: 'AWS::EC2::Subnet'
    Properties:
      MapPublicIpOnLaunch: 'true'
      AvailabilityZone: 'ap-northeast-1c'
      VpcId: !Ref VPC
      CidrBlock: 10.10.5.0/24
  # VPCDBSubnetGroup:
  #   Type: 'AWS::EC2::Subnet'
  #   Properties:
  #     AvailabilityZone: !Select
  #       - '0'
  #       - !GetAZs
  #         Ref: 'AWS::Region'
  #     VpcId: !Ref VPC
  #     CidrBlock: 10.10.1.0/24
  VPCDBSubnetGroup:
    Type: 'AWS::RDS::DBSubnetGroup'
    Properties:
      DBSubnetGroupDescription: "Subnet2 for RDS"
      SubnetIds:
        - !Ref VPCSubnetAZ1
        - !Ref VPCSubnetAZ2
  CacheSubnetGroup:
    Type: "AWS::ElastiCache::SubnetGroup"
    Properties:
      Description: Redis Subnet Group
      SubnetIds:
        - !Ref VPCSubnetAZ3
        - !Ref VPCSubnetAZ4

  # Gateway
  VPCInternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties: {}
  VPCAttachGateway:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref VPCInternetGateway

  # Route / RouteTable
  VPCRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      Tags:
        - Key: Name
          Value: CloudformerVPCRouteTable
      VpcId: !Ref VPC
  VPCSubnetRouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref VPCSubnet
      RouteTableId: !Ref VPCRouteTable
  VPCSubnet2RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref VPCSubnet2
      RouteTableId: !Ref VPCRouteTable
  VPCSubnetAZ1RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref VPCSubnetAZ1
      RouteTableId: !Ref VPCRouteTable
  VPCSubnetAZ2RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref VPCSubnetAZ2
      RouteTableId: !Ref VPCRouteTable
  VPCSubnetAZ3RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref VPCSubnetAZ3
      RouteTableId: !Ref VPCRouteTable
  VPCSubnetAZ4RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref VPCSubnetAZ4
      RouteTableId: !Ref VPCRouteTable
  RouteVPCAny:
    Type: 'AWS::EC2::Route'
    DependsOn: VPCAttachGateway
    Properties:
      RouteTableId: !Ref VPCRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref VPCInternetGateway
Outputs:
  StackVPC:
    Description: The ID of the VPC
    Value: !Ref VPC
    Export:
      Name: !Join [ "-", [ "Ref":"Environment" , "vpcid"]]
  PublicRouteTable:
    Description: The ID of the PublicRouteTable
    Value: !Ref VPCRouteTable
    Export:
      Name: !Join [ "-", [ "Ref":"Environment", "VPCRouteTable"]]
  ECR:
    Description: ECR
    Value: !Ref ECR
# Outputs:
#   CustomVPCWebsiteURL:
#     Description: URL for CloudFormer
#     Value: !Join 
#       - ''
#       - - 'https://'
#         - !If 
#           - CreateNewVPC
#           - !GetAtt 
#             - WebServer01
#             - PublicDnsName
#           - !GetAtt 
#             - WebServer02
#             - PublicDnsName